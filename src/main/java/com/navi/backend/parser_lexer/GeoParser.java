
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navi.backend.parser_lexer;

import java_cup.runtime.*;
import java.util.*;
import com.navi.backend.parameters.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GeoParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public GeoParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GeoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GeoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\004\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\006\000\002\005\010\000\002" +
    "\006\013\000\002\010\015\000\002\011\017\000\002\007" +
    "\011\000\002\007\011\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\006\003\007\005\006\001\002\000\010\002" +
    "\000\003\000\005\000\001\002\000\010\002\154\003\007" +
    "\005\006\001\002\000\014\011\102\013\101\014\103\015" +
    "\077\016\100\001\002\000\004\023\052\001\002\000\012" +
    "\002\ufffe\003\ufffe\005\ufffe\006\011\001\002\000\004\007" +
    "\013\001\002\000\010\002\ufffd\003\ufffd\005\ufffd\001\002" +
    "\000\004\010\014\001\002\000\004\023\015\001\002\000" +
    "\006\011\016\012\020\001\002\000\004\004\044\001\002" +
    "\000\004\024\043\001\002\000\004\004\021\001\002\000" +
    "\006\023\023\037\024\001\002\000\014\004\037\017\027" +
    "\020\031\021\032\022\030\001\002\000\006\023\023\037" +
    "\024\001\002\000\016\004\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\024\uffe2\001\002\000\014\017\027\020\031\021" +
    "\032\022\030\024\026\001\002\000\016\004\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\024\uffe3\001\002\000\006\023" +
    "\023\037\024\001\002\000\006\023\023\037\024\001\002" +
    "\000\006\023\023\037\024\001\002\000\006\023\023\037" +
    "\024\001\002\000\016\004\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\024\uffe5\001\002\000\016\004\uffe6\017\uffe6\020" +
    "\uffe6\021\032\022\030\024\uffe6\001\002\000\016\004\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4\001\002\000" +
    "\016\004\uffe7\017\uffe7\020\uffe7\021\032\022\030\024\uffe7" +
    "\001\002\000\006\023\023\037\024\001\002\000\014\004" +
    "\041\017\027\020\031\021\032\022\030\001\002\000\006" +
    "\023\023\037\024\001\002\000\014\017\027\020\031\021" +
    "\032\022\030\024\ufff1\001\002\000\010\002\ufff6\003\ufff6" +
    "\005\ufff6\001\002\000\006\023\023\037\024\001\002\000" +
    "\014\004\046\017\027\020\031\021\032\022\030\001\002" +
    "\000\006\023\023\037\024\001\002\000\014\004\050\017" +
    "\027\020\031\021\032\022\030\001\002\000\006\023\023" +
    "\037\024\001\002\000\014\017\027\020\031\021\032\022" +
    "\030\024\ufff2\001\002\000\004\036\053\001\002\000\004" +
    "\004\056\001\002\000\004\024\055\001\002\000\012\002" +
    "\ufff7\003\ufff7\005\ufff7\006\ufff7\001\002\000\006\023\023" +
    "\037\024\001\002\000\014\004\060\017\027\020\031\021" +
    "\032\022\030\001\002\000\006\023\023\037\024\001\002" +
    "\000\014\004\062\017\027\020\031\021\032\022\030\001" +
    "\002\000\006\023\023\037\024\001\002\000\014\004\064" +
    "\017\027\020\031\021\032\022\030\001\002\000\024\025" +
    "\071\026\074\027\072\030\065\031\066\032\075\033\076" +
    "\034\070\035\073\001\002\000\004\024\uffed\001\002\000" +
    "\004\024\uffec\001\002\000\004\024\ufff5\001\002\000\004" +
    "\024\uffe9\001\002\000\004\024\ufff0\001\002\000\004\024" +
    "\uffee\001\002\000\004\024\uffe8\001\002\000\004\024\uffef" +
    "\001\002\000\004\024\uffeb\001\002\000\004\024\uffea\001" +
    "\002\000\004\023\150\001\002\000\004\023\130\001\002" +
    "\000\004\023\125\001\002\000\004\023\107\001\002\000" +
    "\004\023\104\001\002\000\004\036\053\001\002\000\004" +
    "\024\106\001\002\000\012\002\ufffb\003\ufffb\005\ufffb\006" +
    "\ufffb\001\002\000\004\036\110\001\002\000\004\004\113" +
    "\001\002\000\004\024\112\001\002\000\012\002\ufff9\003" +
    "\ufff9\005\ufff9\006\ufff9\001\002\000\006\023\023\037\024" +
    "\001\002\000\014\004\115\017\027\020\031\021\032\022" +
    "\030\001\002\000\006\023\023\037\024\001\002\000\014" +
    "\004\117\017\027\020\031\021\032\022\030\001\002\000" +
    "\006\023\023\037\024\001\002\000\014\004\121\017\027" +
    "\020\031\021\032\022\030\001\002\000\006\023\023\037" +
    "\024\001\002\000\014\004\123\017\027\020\031\021\032" +
    "\022\030\001\002\000\024\025\071\026\074\027\072\030" +
    "\065\031\066\032\075\033\076\034\070\035\073\001\002" +
    "\000\004\024\ufff4\001\002\000\004\036\053\001\002\000" +
    "\004\024\127\001\002\000\012\002\ufffc\003\ufffc\005\ufffc" +
    "\006\ufffc\001\002\000\004\036\131\001\002\000\004\004" +
    "\134\001\002\000\004\024\133\001\002\000\012\002\ufff8" +
    "\003\ufff8\005\ufff8\006\ufff8\001\002\000\006\023\023\037" +
    "\024\001\002\000\014\004\136\017\027\020\031\021\032" +
    "\022\030\001\002\000\006\023\023\037\024\001\002\000" +
    "\014\004\140\017\027\020\031\021\032\022\030\001\002" +
    "\000\006\023\023\037\024\001\002\000\014\004\142\017" +
    "\027\020\031\021\032\022\030\001\002\000\006\023\023" +
    "\037\024\001\002\000\014\004\144\017\027\020\031\021" +
    "\032\022\030\001\002\000\006\023\023\037\024\001\002" +
    "\000\014\004\146\017\027\020\031\021\032\022\030\001" +
    "\002\000\024\025\071\026\074\027\072\030\065\031\066" +
    "\032\075\033\076\034\070\035\073\001\002\000\004\024" +
    "\ufff3\001\002\000\004\036\110\001\002\000\004\024\152" +
    "\001\002\000\012\002\ufffa\003\ufffa\005\ufffa\006\ufffa\001" +
    "\002\000\010\002\uffff\003\uffff\005\uffff\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\010\002\004\003\003\004\007\001\001\000" +
    "\002\001\001\000\006\003\152\004\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\021\001\001" +
    "\000\002\001\001\000\004\013\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\035" +
    "\001\001\000\004\013\034\001\001\000\004\013\033\001" +
    "\001\000\004\013\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\037\001\001\000\002\001\001\000\004\013\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\044\001" +
    "\001\000\002\001\001\000\004\013\046\001\001\000\002" +
    "\001\001\000\004\013\050\001\001\000\002\001\001\000" +
    "\004\006\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\056\001\001\000\002\001" +
    "\001\000\004\013\060\001\001\000\002\001\001\000\004" +
    "\013\062\001\001\000\002\001\001\000\004\012\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\113\001\001\000\002\001\001\000" +
    "\004\013\115\001\001\000\002\001\001\000\004\013\117" +
    "\001\001\000\002\001\001\000\004\013\121\001\001\000" +
    "\002\001\001\000\004\012\123\001\001\000\002\001\001" +
    "\000\004\006\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\134\001\001\000" +
    "\002\001\001\000\004\013\136\001\001\000\002\001\001" +
    "\000\004\013\140\001\001\000\002\001\001\000\004\013" +
    "\142\001\001\000\002\001\001\000\004\013\144\001\001" +
    "\000\002\001\001\000\004\012\146\001\001\000\002\001" +
    "\001\000\004\010\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GeoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GeoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GeoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public GeoParser(GeoLexer lex) {
        super(lex);
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        /*
        TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        Querys.errors.add(err);
        try {
           while(true){
                if(getScanner().next_token().sym == sym.P_COMA) break;
            }
            parse();
        } catch (Exception e) {
            //throw new RuntimeException(e);
        }*/
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        //TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        //Querys.errors.add(err);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GeoParser$actions {
  private final GeoParser parser;

  /** Constructor */
  CUP$GeoParser$actions(GeoParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$GeoParser$do_action_part00000000(
    int                        CUP$GeoParser$act_num,
    java_cup.runtime.lr_parser CUP$GeoParser$parser,
    java.util.Stack            CUP$GeoParser$stack,
    int                        CUP$GeoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GeoParser$result;

      /* select the action based on the action number */
      switch (CUP$GeoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instructions EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		ArrayList<Parameter> start_val = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		RESULT = start_val;
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GeoParser$parser.done_parsing();
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instructions ::= instruction 
            {
              ArrayList<Parameter> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		ArrayList<Parameter> i = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
            RESULT = i;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("instructions",0, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instructions instruction 
            {
              ArrayList<Parameter> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		ArrayList<Parameter> list = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		ArrayList<Parameter> i = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
            list.addAll(i);
            RESULT = list;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("instructions",0, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= graph 
            {
              ArrayList<Parameter> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Parameter g = (Parameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
            ArrayList<Parameter> list = new ArrayList<>();
            list.add(g);
            RESULT = list;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= graph animate 
            {
              ArrayList<Parameter> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Parameter g = (Parameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Parameter a = (Parameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
            ArrayList<Parameter> list = new ArrayList<>();
            list.add(g);
            list.add(a);
            RESULT = list;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // graph ::= GRAFICAR CIRCLE LPAREN circle_square_param RPAREN 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		
            p.setType(Parameter.CIRCLE);
            RESULT = p;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",2, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // graph ::= GRAFICAR SQUARE LPAREN circle_square_param RPAREN 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		
            p.setType(Parameter.SQUARE);
            RESULT = p;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",2, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // graph ::= GRAFICAR RECTANGLE LPAREN rectangle_line_param RPAREN 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		RectangleLineParameter p = (RectangleLineParameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		
            p.setType(Parameter.RECTANGLE);
            RESULT = p;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",2, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // graph ::= GRAFICAR LINE LPAREN rectangle_line_param RPAREN 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		RectangleLineParameter p = (RectangleLineParameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		
            p.setType(Parameter.LINE);
            RESULT = p;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",2, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graph ::= GRAFICAR POLYGON LPAREN polygon_param RPAREN 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		PolygonParameter p = (PolygonParameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		
            p.setType(Parameter.POLYGON);
            RESULT = p;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",2, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // graph ::= error LPAREN circle_square_param RPAREN 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		

            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",2, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // animate ::= ANIMAR OBJETO ANTERIOR LPAREN animate_param RPAREN 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		
            RESULT = p;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("animate",3, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-5)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // circle_square_param ::= ID COMMA expr COMMA expr COMMA expr COMMA color 
            {
              Parameter RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Double e3 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
                    RESULT = new Parameter(Parameter.SQUARE, id, e1, e2, e3, c);
                    
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("circle_square_param",4, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rectangle_line_param ::= ID COMMA expr COMMA expr COMMA expr COMMA expr COMMA color 
            {
              RectangleLineParameter RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).right;
		Double e3 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Double e4 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
                    RESULT = new RectangleLineParameter(Parameter.RECTANGLE, id, e1, e2, e3, e4, c);
                    
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("rectangle_line_param",6, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // polygon_param ::= ID COMMA expr COMMA expr COMMA expr COMMA expr COMMA expr COMMA color 
            {
              PolygonParameter RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-12)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).right;
		Double e3 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).right;
		Double e4 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Double e5 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
                    RESULT = new PolygonParameter(Parameter.POLYGON, id, e1, e2, e3, e4, e5, c);
                    
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("polygon_param",7, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-12)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // animate_param ::= LINE COMMA expr COMMA expr COMMA expr 
            {
              Parameter RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Double e3 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
                    RESULT = new Parameter(Parameter.ANIMATE, "curve", e1, e2, e3, "");
                    
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("animate_param",5, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // animate_param ::= CURVE COMMA expr COMMA expr COMMA expr 
            {
              Parameter RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Double e3 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
                    RESULT = new Parameter(Parameter.ANIMATE, "curve", e1, e2, e3, "");
                    
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("animate_param",5, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // color ::= BLUE 
            {
              String RESULT =null;
		RESULT = "#2209c3"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",8, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // color ::= RED 
            {
              String RESULT =null;
		RESULT = "#ff0000"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",8, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // color ::= YELLOW 
            {
              String RESULT =null;
		RESULT = "#ffc100"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",8, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // color ::= GREEN 
            {
              String RESULT =null;
		RESULT = "#008000"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",8, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // color ::= SKY 
            {
              String RESULT =null;
		RESULT = "#86cecb"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",8, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // color ::= CYAN 
            {
              String RESULT =null;
		RESULT = "#0bdbb6"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",8, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // color ::= BLACK 
            {
              String RESULT =null;
		RESULT = "#000000"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",8, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // color ::= PINK 
            {
              String RESULT =null;
		RESULT = "#ffaadd"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",8, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // color ::= PURPLE 
            {
              String RESULT =null;
		RESULT = "#4c00b0"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",8, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr PLUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr MINUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr TIMES expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr DIVISION expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		 RESULT = e1 / e2; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		 RESULT = e; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= DIGIT 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		 RESULT = d; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GeoParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$GeoParser$do_action(
    int                        CUP$GeoParser$act_num,
    java_cup.runtime.lr_parser CUP$GeoParser$parser,
    java.util.Stack            CUP$GeoParser$stack,
    int                        CUP$GeoParser$top)
    throws java.lang.Exception
    {
              return CUP$GeoParser$do_action_part00000000(
                               CUP$GeoParser$act_num,
                               CUP$GeoParser$parser,
                               CUP$GeoParser$stack,
                               CUP$GeoParser$top);
    }
}

}
