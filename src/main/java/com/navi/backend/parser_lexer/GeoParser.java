
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navi.backend.parser_lexer;

import java_cup.runtime.*;
import java.util.*;
import com.navi.backend.parameters.*;
import java.text.DecimalFormat;
import com.navi.backend.parser_lexer.errors_lp.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GeoParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public GeoParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GeoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GeoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\005\007\000\002" +
    "\005\007\000\002\005\005\000\002\005\007\000\002\005" +
    "\007\000\002\005\007\000\002\005\007\000\002\005\007" +
    "\000\002\006\010\000\002\007\013\000\002\011\015\000" +
    "\002\012\017\000\002\010\011\000\002\010\011\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\004\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\006\003\007\005\006\001\002\000\010\002" +
    "\uffff\003\uffff\005\uffff\001\002\000\010\002\000\003\007" +
    "\005\006\001\002\000\016\003\061\011\064\013\062\014" +
    "\063\015\057\016\060\001\002\000\012\002\ufffb\003\ufffb" +
    "\005\ufffb\006\012\001\002\000\004\002\055\001\002\000" +
    "\012\002\ufffd\003\ufffd\005\ufffd\006\012\001\002\000\004" +
    "\007\014\001\002\000\010\002\ufffc\003\ufffc\005\ufffc\001" +
    "\002\000\004\010\015\001\002\000\004\023\016\001\002" +
    "\000\006\011\017\012\021\001\002\000\004\004\047\001" +
    "\002\000\004\024\046\001\002\000\004\004\022\001\002" +
    "\000\010\020\023\023\024\037\026\001\002\000\010\020" +
    "\023\023\024\037\026\001\002\000\010\020\023\023\024" +
    "\037\026\001\002\000\014\004\027\017\030\020\032\021" +
    "\033\022\031\001\002\000\016\004\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\024\uffd9\001\002\000\010\020\023\023" +
    "\024\037\026\001\002\000\010\020\023\023\024\037\026" +
    "\001\002\000\010\020\023\023\024\037\026\001\002\000" +
    "\010\020\023\023\024\037\026\001\002\000\010\020\023" +
    "\023\024\037\026\001\002\000\016\004\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\024\uffdd\001\002\000\016\004\uffde" +
    "\017\uffde\020\uffde\021\033\022\031\024\uffde\001\002\000" +
    "\016\004\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\024\uffdc" +
    "\001\002\000\016\004\uffdf\017\uffdf\020\uffdf\021\033\022" +
    "\031\024\uffdf\001\002\000\014\004\041\017\030\020\032" +
    "\021\033\022\031\001\002\000\010\020\023\023\024\037" +
    "\026\001\002\000\014\017\030\020\032\021\033\022\031" +
    "\024\uffe9\001\002\000\014\017\030\020\032\021\033\022" +
    "\031\024\044\001\002\000\016\004\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\024\uffdb\001\002\000\016\004\uffda\017" +
    "\uffda\020\uffda\021\033\022\031\024\uffda\001\002\000\010" +
    "\002\uffee\003\uffee\005\uffee\001\002\000\010\020\023\023" +
    "\024\037\026\001\002\000\014\004\051\017\030\020\032" +
    "\021\033\022\031\001\002\000\010\020\023\023\024\037" +
    "\026\001\002\000\014\004\053\017\030\020\032\021\033" +
    "\022\031\001\002\000\010\020\023\023\024\037\026\001" +
    "\002\000\014\017\030\020\032\021\033\022\031\024\uffea" +
    "\001\002\000\004\002\001\001\002\000\010\002\ufffa\003" +
    "\ufffa\005\ufffa\001\002\000\004\023\164\001\002\000\004" +
    "\023\142\001\002\000\004\024\141\001\002\000\004\023" +
    "\134\001\002\000\004\023\116\001\002\000\004\023\065" +
    "\001\002\000\006\003\070\036\066\001\002\000\004\004" +
    "\073\001\002\000\004\024\072\001\002\000\004\024\071" +
    "\001\002\000\012\002\ufff0\003\ufff0\005\ufff0\006\ufff0\001" +
    "\002\000\012\002\ufff6\003\ufff6\005\ufff6\006\ufff6\001\002" +
    "\000\010\020\023\023\024\037\026\001\002\000\014\004" +
    "\075\017\030\020\032\021\033\022\031\001\002\000\010" +
    "\020\023\023\024\037\026\001\002\000\014\004\077\017" +
    "\030\020\032\021\033\022\031\001\002\000\010\020\023" +
    "\023\024\037\026\001\002\000\014\004\101\017\030\020" +
    "\032\021\033\022\031\001\002\000\010\020\023\023\024" +
    "\037\026\001\002\000\014\004\103\017\030\020\032\021" +
    "\033\022\031\001\002\000\024\025\110\026\113\027\111" +
    "\030\104\031\105\032\114\033\115\034\107\035\112\001" +
    "\002\000\004\024\uffe5\001\002\000\004\024\uffe4\001\002" +
    "\000\004\024\uffec\001\002\000\004\024\uffe1\001\002\000" +
    "\004\024\uffe8\001\002\000\004\024\uffe6\001\002\000\004" +
    "\024\uffe0\001\002\000\004\024\uffe7\001\002\000\004\024" +
    "\uffe3\001\002\000\004\024\uffe2\001\002\000\006\003\120" +
    "\036\117\001\002\000\004\004\124\001\002\000\004\024" +
    "\123\001\002\000\004\024\122\001\002\000\012\002\ufff8" +
    "\003\ufff8\005\ufff8\006\ufff8\001\002\000\012\002\ufff2\003" +
    "\ufff2\005\ufff2\006\ufff2\001\002\000\010\020\023\023\024" +
    "\037\026\001\002\000\014\004\126\017\030\020\032\021" +
    "\033\022\031\001\002\000\010\020\023\023\024\037\026" +
    "\001\002\000\014\004\130\017\030\020\032\021\033\022" +
    "\031\001\002\000\010\020\023\023\024\037\026\001\002" +
    "\000\014\004\132\017\030\020\032\021\033\022\031\001" +
    "\002\000\024\025\110\026\113\027\111\030\104\031\105" +
    "\032\114\033\115\034\107\035\112\001\002\000\004\024" +
    "\uffed\001\002\000\006\003\135\036\117\001\002\000\004" +
    "\024\140\001\002\000\004\024\137\001\002\000\012\002" +
    "\ufff9\003\ufff9\005\ufff9\006\ufff9\001\002\000\012\002\ufff3" +
    "\003\ufff3\005\ufff3\006\ufff3\001\002\000\012\002\ufff4\003" +
    "\ufff4\005\ufff4\006\ufff4\001\002\000\006\003\145\036\143" +
    "\001\002\000\004\004\150\001\002\000\004\024\147\001" +
    "\002\000\004\024\146\001\002\000\012\002\uffef\003\uffef" +
    "\005\uffef\006\uffef\001\002\000\012\002\ufff5\003\ufff5\005" +
    "\ufff5\006\ufff5\001\002\000\010\020\023\023\024\037\026" +
    "\001\002\000\014\004\152\017\030\020\032\021\033\022" +
    "\031\001\002\000\010\020\023\023\024\037\026\001\002" +
    "\000\014\004\154\017\030\020\032\021\033\022\031\001" +
    "\002\000\010\020\023\023\024\037\026\001\002\000\014" +
    "\004\156\017\030\020\032\021\033\022\031\001\002\000" +
    "\010\020\023\023\024\037\026\001\002\000\014\004\160" +
    "\017\030\020\032\021\033\022\031\001\002\000\010\020" +
    "\023\023\024\037\026\001\002\000\014\004\162\017\030" +
    "\020\032\021\033\022\031\001\002\000\024\025\110\026" +
    "\113\027\111\030\104\031\105\032\114\033\115\034\107" +
    "\035\112\001\002\000\004\024\uffeb\001\002\000\006\003" +
    "\166\036\066\001\002\000\004\024\170\001\002\000\004" +
    "\024\167\001\002\000\012\002\ufff1\003\ufff1\005\ufff1\006" +
    "\ufff1\001\002\000\012\002\ufff7\003\ufff7\005\ufff7\006\ufff7" +
    "\001\002\000\010\002\ufffe\003\ufffe\005\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\012\002\007\003\004\004\003\005\010\001" +
    "\001\000\002\001\001\000\006\004\170\005\010\001\001" +
    "\000\002\001\001\000\004\006\055\001\001\000\002\001" +
    "\001\000\004\006\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\024\001\001\000\004\014\044\001" +
    "\001\000\004\014\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\037\001\001\000\004\014\036\001" +
    "\001\000\004\014\035\001\001\000\004\014\034\001\001" +
    "\000\004\014\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\047\001\001\000\002\001\001\000\004\014" +
    "\051\001\001\000\002\001\001\000\004\014\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\073\001\001\000\002\001\001\000\004\014\075\001\001" +
    "\000\002\001\001\000\004\014\077\001\001\000\002\001" +
    "\001\000\004\014\101\001\001\000\002\001\001\000\004" +
    "\013\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\124\001\001\000\002" +
    "\001\001\000\004\014\126\001\001\000\002\001\001\000" +
    "\004\014\130\001\001\000\002\001\001\000\004\013\132" +
    "\001\001\000\002\001\001\000\004\007\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\150\001\001\000" +
    "\002\001\001\000\004\014\152\001\001\000\002\001\001" +
    "\000\004\014\154\001\001\000\002\001\001\000\004\014" +
    "\156\001\001\000\002\001\001\000\004\014\160\001\001" +
    "\000\002\001\001\000\004\013\162\001\001\000\002\001" +
    "\001\000\004\011\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GeoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GeoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GeoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ArrayList<Parameter> parameters = new ArrayList<>();
    private ArrayList<Operation> operations = new ArrayList<>();
    public GeoParser(GeoLexer lex) {
        super(lex);
    }
    public ArrayList<Parameter> getParameters(){
        return parameters;
    }
    public ArrayList<Operation> getOperations(){
        return operations;
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        addError(lexeme, line, col, "Error no recuperable");
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
        List<Integer> tokens = expected_token_ids();
        String des = "Se esperaba: ";
        for(Integer i : tokens) {
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                if(!fromId.equals("error") && !fromId.equals("EOF")){
                    des += fromId +" o ";
                }
            }
        }
        if(des.length() > 3) des = des.substring(0, des.length() - 3);
        addError(lexeme, line, col, des);
    }

    public void countOperations(String lexeme, int line, int col, Expression e1, Expression e2) throws java.lang.Exception{
        String[] ex1 = e1.getStr().split(" ");
        String[] ex2 = e2.getStr().split(" ");

        String ex = ex1[ex1.length-1] + " "+lexeme+" "+ ex2[0];

        operations.add(new Operation(lexeme, line, col, ex));
    }
    private void addError(String lexeme, int line, int col, String description){
        ErrorsLP.addError(lexeme, line, col, "Error Sintáctico", description);
    }
    protected int error_sync_size() {
            return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GeoParser$actions {
  private final GeoParser parser;

  /** Constructor */
  CUP$GeoParser$actions(GeoParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$GeoParser$do_action_part00000000(
    int                        CUP$GeoParser$act_num,
    java_cup.runtime.lr_parser CUP$GeoParser$parser,
    java.util.Stack            CUP$GeoParser$stack,
    int                        CUP$GeoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GeoParser$result;

      /* select the action based on the action number */
      switch (CUP$GeoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		RESULT = start_val;
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GeoParser$parser.done_parsing();
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= instructions 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		ArrayList<Parameter> i = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
    parameters = i;
    
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instruction 
            {
              ArrayList<Parameter> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		ArrayList<Parameter> i = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
            RESULT = i;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= instructions instruction 
            {
              ArrayList<Parameter> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		ArrayList<Parameter> list = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		ArrayList<Parameter> i = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
            list.addAll(i);
            RESULT = list;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= graph 
            {
              ArrayList<Parameter> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Parameter g = (Parameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
            ArrayList<Parameter> list = new ArrayList<>();
            list.add(g);
            RESULT = list;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= graph animate 
            {
              ArrayList<Parameter> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Parameter g = (Parameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Parameter a = (Parameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
            ArrayList<Parameter> list = new ArrayList<>();
            list.add(g);
            list.add(a);
            RESULT = list;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= error 
            {
              ArrayList<Parameter> RESULT =null;
		System.out.println("Error de todo");
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= error animate 
            {
              ArrayList<Parameter> RESULT =null;
		System.out.println("Error grap");
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // graph ::= GRAFICAR CIRCLE LPAREN circle_square_param RPAREN 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		
            p.setType(Parameter.CIRCLE);
            RESULT = p;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",3, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graph ::= GRAFICAR SQUARE LPAREN circle_square_param RPAREN 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		
            p.setType(Parameter.SQUARE);
            RESULT = p;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",3, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // graph ::= GRAFICAR RECTANGLE LPAREN rectangle_line_param RPAREN 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		RectangleLineParameter p = (RectangleLineParameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		
            p.setType(Parameter.RECTANGLE);
            RESULT = p;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",3, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graph ::= GRAFICAR LINE LPAREN rectangle_line_param RPAREN 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		RectangleLineParameter p = (RectangleLineParameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		
            p.setType(Parameter.LINE);
            RESULT = p;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",3, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graph ::= GRAFICAR POLYGON LPAREN polygon_param RPAREN 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		PolygonParameter p = (PolygonParameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		
            p.setType(Parameter.POLYGON);
            RESULT = p;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",3, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // graph ::= GRAFICAR error RPAREN 
            {
              Parameter RESULT =null;

              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",3, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graph ::= GRAFICAR CIRCLE LPAREN error RPAREN 
            {
              Parameter RESULT =null;

              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",3, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // graph ::= GRAFICAR SQUARE LPAREN error RPAREN 
            {
              Parameter RESULT =null;

              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",3, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // graph ::= GRAFICAR RECTANGLE LPAREN error RPAREN 
            {
              Parameter RESULT =null;

              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",3, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // graph ::= GRAFICAR LINE LPAREN error RPAREN 
            {
              Parameter RESULT =null;

              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",3, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // graph ::= GRAFICAR POLYGON LPAREN error RPAREN 
            {
              Parameter RESULT =null;

              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("graph",3, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // animate ::= ANIMAR OBJETO ANTERIOR LPAREN animate_param RPAREN 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		
            RESULT = p;
            
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("animate",4, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-5)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // circle_square_param ::= ID COMMA expr COMMA expr COMMA expr COMMA color 
            {
              Parameter RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
                    RESULT = new Parameter(Parameter.SQUARE, id, e1, e2, e3, c);
                    
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("circle_square_param",5, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // rectangle_line_param ::= ID COMMA expr COMMA expr COMMA expr COMMA expr COMMA color 
            {
              RectangleLineParameter RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Expression e4 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
                    RESULT = new RectangleLineParameter(Parameter.RECTANGLE, id, e1, e2, e3, e4, c);
                    
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("rectangle_line_param",7, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // polygon_param ::= ID COMMA expr COMMA expr COMMA expr COMMA expr COMMA expr COMMA color 
            {
              PolygonParameter RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-12)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).right;
		Expression e4 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Expression e5 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
                    RESULT = new PolygonParameter(Parameter.POLYGON, id, e1, e2, e3, e4, e5, c);
                    
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("polygon_param",8, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-12)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // animate_param ::= LINE COMMA expr COMMA expr COMMA expr 
            {
              Parameter RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
                    RESULT = new Parameter(Parameter.ANIMATE, "line", e1, e2, e3, "");
                    
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("animate_param",6, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // animate_param ::= CURVE COMMA expr COMMA expr COMMA expr 
            {
              Parameter RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
                    RESULT = new Parameter(Parameter.ANIMATE, "curve", e1, e2, e3, "");
                    
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("animate_param",6, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-6)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // color ::= BLUE 
            {
              String RESULT =null;
		RESULT = "azul"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // color ::= RED 
            {
              String RESULT =null;
		RESULT = "rojo"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // color ::= YELLOW 
            {
              String RESULT =null;
		RESULT = "amarillo"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // color ::= GREEN 
            {
              String RESULT =null;
		RESULT = "verde"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // color ::= SKY 
            {
              String RESULT =null;
		RESULT = "celeste"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // color ::= CYAN 
            {
              String RESULT =null;
		RESULT = "cyan"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // color ::= BLACK 
            {
              String RESULT =null;
		RESULT = "negro"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // color ::= PINK 
            {
              String RESULT =null;
		RESULT = "rosado"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // color ::= PURPLE 
            {
              String RESULT =null;
		RESULT = "morado"; 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("color",9, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
        countOperations("+", sleft, sright, e1, e2);
        RESULT = new Expression(e1.getStr() +" + "+ e2.getStr(), e1.getValue() + e2.getValue());
        
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
        countOperations("-", sleft, sright, e1, e2);
        RESULT = new Expression(e1.getStr() +" - "+ e2.getStr(), e1.getValue() - e2.getValue());
        
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr TIMES expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
        countOperations("*", sleft, sright, e1, e2);
        RESULT = new Expression(e1.getStr() +" * "+ e2.getStr(), e1.getValue() * e2.getValue());
        
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr DIVISION expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
        countOperations("/", sleft, sright, e1, e2);
        if(e2.getValue()!=0) RESULT = new Expression(e1.getStr() +" / "+ e2.getStr(), e1.getValue() / e2.getValue());
        else {
            addError(e2.getStr(), sleft, sright, "No puedes divir entre 0");
            RESULT = new Expression(e1.getStr() +" / "+ e2.getStr(), 0);
        }
        
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)).value;
		 RESULT = new Expression("( "+e.getStr()+" ) ", e.getValue()); 
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		RESULT = new Expression("-"+e.getStr(),-e.getValue());
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.elementAt(CUP$GeoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= DIGIT 
            {
              Expression RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$GeoParser$stack.peek()).value;
		
        DecimalFormat df = new DecimalFormat("0.#");

        RESULT = new Expression(df.format(d), d);
        
              CUP$GeoParser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeoParser$stack.peek()), RESULT);
            }
          return CUP$GeoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GeoParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$GeoParser$do_action(
    int                        CUP$GeoParser$act_num,
    java_cup.runtime.lr_parser CUP$GeoParser$parser,
    java.util.Stack            CUP$GeoParser$stack,
    int                        CUP$GeoParser$top)
    throws java.lang.Exception
    {
              return CUP$GeoParser$do_action_part00000000(
                               CUP$GeoParser$act_num,
                               CUP$GeoParser$parser,
                               CUP$GeoParser$stack,
                               CUP$GeoParser$top);
    }
}

}
