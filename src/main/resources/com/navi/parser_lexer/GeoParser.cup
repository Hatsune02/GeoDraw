package com.navi.backend.parser_lexer;
import java_cup.runtime.*;
import java.util.*;
import com.navi.backend.parameters.*;

parser code
{:
    public GeoParser(GeoLexer lex) {
        super(lex);
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        /*
        TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        Querys.errors.add(err);
        try {
           while(true){
                if(getScanner().next_token().sym == sym.P_COMA) break;
            }
            parse();
        } catch (Exception e) {
            //throw new RuntimeException(e);
        }*/
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        //TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        //Querys.errors.add(err);
    }
:}

terminal COMMA, GRAFICAR, ANIMAR, OBJETO, ANTERIOR, LINE, CURVE, CIRCLE,
        SQUARE, RECTANGLE, POLYGON, PLUS, MINUS, TIMES, DIVISION,
        LPAREN, RPAREN, BLUE, RED, YELLOW, GREEN, SKY, CYAN,
        BLACK, PINK, PURPLE;

terminal String ID;

terminal Double DIGIT;

non terminal ArrayList<Parameter> instructions, instruction;

non terminal Parameter graph, animate,  circle_square_param, animate_param;

non terminal RectangleLineParameter rectangle_line_param;

non terminal PolygonParameter polygon_param;


non terminal String color;

non terminal Double expr;


//Presedencia
precedence left PLUS, MINUS;
precedence left TIMES, DIVISION;

start with instructions;

instructions ::= instruction:i
            {:
            RESULT = i;
            :}
            | instructions:list instruction:i
            {:
            list.addAll(i);
            RESULT = list;
            :}
            ;

instruction ::= graph:g
            {:
            ArrayList<Parameter> list = new ArrayList<>();
            list.add(g);
            RESULT = list;
            :}
            | graph:g animate:a
            {:
            ArrayList<Parameter> list = new ArrayList<>();
            list.add(g);
            list.add(a);
            RESULT = list;
            :}
            ;

graph ::=     GRAFICAR CIRCLE LPAREN circle_square_param:p RPAREN
            {:
            p.setType(Parameter.CIRCLE);
            RESULT = p;
            :}
            | GRAFICAR SQUARE LPAREN circle_square_param:p RPAREN
            {:
            p.setType(Parameter.SQUARE);
            RESULT = p;
            :}
            | GRAFICAR RECTANGLE LPAREN rectangle_line_param:p RPAREN
            {:
            p.setType(Parameter.RECTANGLE);
            RESULT = p;
            :}
            | GRAFICAR LINE LPAREN rectangle_line_param:p RPAREN
            {:
            p.setType(Parameter.LINE);
            RESULT = p;
            :}
            | GRAFICAR POLYGON LPAREN polygon_param:p RPAREN
            {:
            p.setType(Parameter.POLYGON);
            RESULT = p;
            :}
            | error LPAREN circle_square_param:p RPAREN
            {:

            :}
            ;

animate ::= ANIMAR OBJETO ANTERIOR LPAREN animate_param:p RPAREN
            {:
            RESULT = p;
            :}
            ;

circle_square_param ::= ID:id COMMA expr:e1 COMMA expr:e2 COMMA expr:e3 COMMA color:c
                    {:
                    RESULT = new Parameter(Parameter.SQUARE, id, e1, e2, e3, c);
                    :}
                    ;

rectangle_line_param ::= ID:id COMMA expr:e1 COMMA expr:e2 COMMA expr:e3 COMMA expr:e4 COMMA color:c
                    {:
                    RESULT = new RectangleLineParameter(Parameter.RECTANGLE, id, e1, e2, e3, e4, c);
                    :}
                    ;

polygon_param ::=   ID:id COMMA expr:e1 COMMA expr:e2 COMMA expr:e3 COMMA expr:e4 COMMA expr:e5 COMMA color:c
                    {:
                    RESULT = new PolygonParameter(Parameter.POLYGON, id, e1, e2, e3, e4, e5, c);
                    :}
                    ;

animate_param ::=     LINE COMMA expr:e1 COMMA expr:e2 COMMA expr:e3
                    {:
                    RESULT = new Parameter(Parameter.ANIMATE, "curve", e1, e2, e3, "");
                    :}
                    | CURVE COMMA expr:e1 COMMA expr:e2 COMMA expr:e3
                    {:
                    RESULT = new Parameter(Parameter.ANIMATE, "curve", e1, e2, e3, "");
                    :}
                ;

color ::=    BLUE   {:RESULT = "#2209c3"; :}
            |RED    {:RESULT = "#ff0000"; :}
            |YELLOW {:RESULT = "#ffc100"; :}
            |GREEN  {:RESULT = "#008000"; :}
            |SKY    {:RESULT = "#86cecb"; :}
            |CYAN   {:RESULT = "#0bdbb6"; :}
            |BLACK  {:RESULT = "#000000"; :}
            |PINK   {:RESULT = "#ffaadd"; :}
            |PURPLE {:RESULT = "#4c00b0"; :}
            ;

expr ::=  expr:e1 PLUS expr:e2      {: RESULT = e1 + e2; :}
        | expr:e1 MINUS expr:e2     {: RESULT = e1 - e2; :}
        | expr:e1 TIMES expr:e2     {: RESULT = e1 * e2; :}
        | expr:e1 DIVISION expr:e2  {: RESULT = e1 / e2; :}
        | LPAREN expr:e RPAREN      {: RESULT = e; :}
        | DIGIT:d                   {: RESULT = d; :}
        ;

