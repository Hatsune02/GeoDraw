package com.navi.backend.parser_lexer;
import java_cup.runtime.*;
import java.util.*;
import com.navi.backend.parameters.*;
import java.text.DecimalFormat;
import com.navi.backend.parser_lexer.errors_lp.*;

parser code
{:
    private ArrayList<Parameter> parameters = new ArrayList<>();
    private ArrayList<Operation> operations = new ArrayList<>();
    public GeoParser(GeoLexer lex) {
        super(lex);
    }
    public ArrayList<Parameter> getParameters(){
        return parameters;
    }
    public ArrayList<Operation> getOperations(){
        return operations;
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);

        addError(lexeme, line, col, "Se esperaba una instruccion para graficar");
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        //TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        //Querys.errors.add(err);
    }

    public void countOperations(String lexeme, int line, int col, Expression e1, Expression e2) throws java.lang.Exception{
        String[] ex1 = e1.getStr().split(" ");
        String[] ex2 = e2.getStr().split(" ");

        String ex = ex1[ex1.length-1] + " "+lexeme+" "+ ex2[0];

        operations.add(new Operation(lexeme, line, col, ex));
    }
    private void addError(String lexeme, int line, int col, String description){
        ErrorsLP.addError(lexeme, line, col, "Error Sintáctico", description);
    }
:}

terminal COMMA, GRAFICAR, ANIMAR, OBJETO, ANTERIOR, LINE, CURVE, CIRCLE,
        SQUARE, RECTANGLE, POLYGON, PLUS, MINUS, TIMES, DIVISION,
        LPAREN, RPAREN, BLUE, RED, YELLOW, GREEN, SKY, CYAN,
        BLACK, PINK, PURPLE;

terminal String ID;

terminal Double DIGIT;

non terminal s;

non terminal ArrayList<Parameter> instructions, instruction;

non terminal Parameter graph, animate,  circle_square_param, animate_param;

non terminal RectangleLineParameter rectangle_line_param;

non terminal PolygonParameter polygon_param;

non terminal String color;

non terminal Expression expr;


//Presedencia
precedence left PLUS, MINUS;
precedence left TIMES, DIVISION;

start with s;

s ::= instructions:i
    {:
    parameters = i;
    :}
        ;

instructions ::= instruction:i
            {:
            RESULT = i;
            :}
            | instructions:list instruction:i
            {:
            list.addAll(i);
            RESULT = list;
            :}
            ;

instruction ::= graph:g
            {:
            ArrayList<Parameter> list = new ArrayList<>();
            list.add(g);
            RESULT = list;
            :}
            | graph:g animate:a
            {:
            ArrayList<Parameter> list = new ArrayList<>();
            list.add(g);
            list.add(a);
            RESULT = list;
            :}
            ;

graph ::=     GRAFICAR CIRCLE LPAREN circle_square_param:p RPAREN
            {:
            p.setType(Parameter.CIRCLE);
            RESULT = p;
            :}
            | GRAFICAR SQUARE LPAREN circle_square_param:p RPAREN
            {:
            p.setType(Parameter.SQUARE);
            RESULT = p;
            :}
            | GRAFICAR RECTANGLE LPAREN rectangle_line_param:p RPAREN
            {:
            p.setType(Parameter.RECTANGLE);
            RESULT = p;
            :}
            | GRAFICAR LINE LPAREN rectangle_line_param:p RPAREN
            {:
            p.setType(Parameter.LINE);
            RESULT = p;
            :}
            | GRAFICAR POLYGON LPAREN polygon_param:p RPAREN
            {:
            p.setType(Parameter.POLYGON);
            RESULT = p;
            :}
            | error:e LPAREN circle_square_param:p RPAREN
            {:
            addError(e.toString(), eleft, eright, "Se esperaba una instruccion para graficar");
            System.out.println("ola");
            :}
            ;

animate ::= ANIMAR OBJETO ANTERIOR LPAREN animate_param:p RPAREN
            {:
            RESULT = p;
            :}
            ;

circle_square_param ::= ID:id COMMA expr:e1 COMMA expr:e2 COMMA expr:e3 COMMA color:c
                    {:
                    RESULT = new Parameter(Parameter.SQUARE, id, e1, e2, e3, c);
                    :}
                    ;

rectangle_line_param ::= ID:id COMMA expr:e1 COMMA expr:e2 COMMA expr:e3 COMMA expr:e4 COMMA color:c
                    {:
                    RESULT = new RectangleLineParameter(Parameter.RECTANGLE, id, e1, e2, e3, e4, c);
                    :}
                    ;

polygon_param ::=   ID:id COMMA expr:e1 COMMA expr:e2 COMMA expr:e3 COMMA expr:e4 COMMA expr:e5 COMMA color:c
                    {:
                    RESULT = new PolygonParameter(Parameter.POLYGON, id, e1, e2, e3, e4, e5, c);
                    :}
                    ;

animate_param ::=     LINE COMMA expr:e1 COMMA expr:e2 COMMA expr:e3
                    {:
                    RESULT = new Parameter(Parameter.ANIMATE, "line", e1, e2, e3, "");
                    :}
                    | CURVE COMMA expr:e1 COMMA expr:e2 COMMA expr:e3
                    {:
                    RESULT = new Parameter(Parameter.ANIMATE, "curve", e1, e2, e3, "");
                    :}
                ;

color ::=    BLUE   {:RESULT = "azul"; :}
            |RED    {:RESULT = "rojo"; :}
            |YELLOW {:RESULT = "amarillo"; :}
            |GREEN  {:RESULT = "verde"; :}
            |SKY    {:RESULT = "celeste"; :}
            |CYAN   {:RESULT = "cyan"; :}
            |BLACK  {:RESULT = "negro"; :}
            |PINK   {:RESULT = "rosado"; :}
            |PURPLE {:RESULT = "morado"; :}
            ;

expr ::=  expr:e1 PLUS:s expr:e2
        {:
        countOperations("+", sleft, sright, e1, e2);
        RESULT = new Expression(e1.getStr() +" + "+ e2.getStr(), e1.getValue() + e2.getValue());
        :}
        | expr:e1 MINUS:s expr:e2
        {:
        countOperations("-", sleft, sright, e1, e2);
        RESULT = new Expression(e1.getStr() +" - "+ e2.getStr(), e1.getValue() - e2.getValue());
        :}
        | expr:e1 TIMES:s expr:e2
        {:
        countOperations("*", sleft, sright, e1, e2);
        RESULT = new Expression(e1.getStr() +" * "+ e2.getStr(), e1.getValue() * e2.getValue());
        :}
        | expr:e1 DIVISION:s expr:e2
        {:
        countOperations("/", sleft, sright, e1, e2);
        if(e2.getValue()!=0) RESULT = new Expression(e1.getStr() +" / "+ e2.getStr(), e1.getValue() / e2.getValue());
        else RESULT = new Expression(e1.getStr() +" / "+ e2.getStr(), 0);
        :}
        | LPAREN expr:e RPAREN      {: RESULT = new Expression("( "+e.getStr()+" ) ", e.getValue()); :}
        | DIGIT:d                   {:
        DecimalFormat df = new DecimalFormat("0.#");

        RESULT = new Expression(df.format(d), d);
        :}
        ;

